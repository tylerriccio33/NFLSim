// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// between_cpp_parallel
LogicalVector between_cpp_parallel(const NumericVector& x, double left, double right);
RcppExport SEXP _NFLSim_between_cpp_parallel(SEXP xSEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type left(leftSEXP);
    Rcpp::traits::input_parameter< double >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(between_cpp_parallel(x, left, right));
    return rcpp_result_gen;
END_RCPP
}
// slice_cpp
Rcpp::NumericVector slice_cpp(Rcpp::NumericVector x, Rcpp::LogicalVector i);
RcppExport SEXP _NFLSim_slice_cpp(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_cpp(x, i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NFLSim_between_cpp_parallel", (DL_FUNC) &_NFLSim_between_cpp_parallel, 3},
    {"_NFLSim_slice_cpp", (DL_FUNC) &_NFLSim_slice_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_NFLSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
